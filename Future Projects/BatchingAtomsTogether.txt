The new mode of presenting static structures:
When duplictaing the atoms and the boundingbox get moved to different places. When having many atoms, first one atom in a corner begins to decay, with 8000 atoms most atoms decay. And it doesn't really show the right amount of atoms, with both 128 and 1000  atoms I think it shows about 500 (8**3). Also, the structure size isn't right, maybe this is just a little bug, which can be fixed by dividing the size of the structure with it's size. You cant grab atoms in the structure anymore, or show their info.

All in all, this might be an efficient way to present large structures with just one kind of element and which has no animation.
But it has to be switched on and off often, which might take long and be time consuming to programm. So I hope there are better ways!

Append this to the end of LoadStructure of ImportStructure:


        if (animState != "anim")
            combineMeshes();
    }

    private void combineMeshes()
    {
        //Destroy(gameObject.GetComponent<MeshFilter>());
        MeshFilter[] meshFilters = GetComponentsInChildren<MeshFilter>();
        CombineInstance[] combine = new CombineInstance[meshFilters.Length - 1];

        int i = 0;
        while (i < meshFilters.Length)
        {
            print(meshFilters[i].gameObject.name);
            // exclude the boundingbox and after init the mesh of the structure
            if (i > 1 || (i > 0 && firstImport))
            {
                combine[i - 1].mesh = meshFilters[i].sharedMesh;
                combine[i - 1].transform = meshFilters[i].transform.localToWorldMatrix;
                meshFilters[i].gameObject.active = false;
            }
            i++;
        }
        MeshFilter myMeshFilter;
        myMeshFilter = gameObject.GetComponent<MeshFilter>();
        if (!myMeshFilter)
        {
            gameObject.AddComponent<MeshFilter>();
            myMeshFilter = gameObject.GetComponent<MeshFilter>();
        }
        gameObject.GetComponent<Renderer>().material.color = 
            SD.atomInfos[0].m_transform.gameObject.GetComponent<Renderer>().material.color;
        transform.GetComponent<MeshFilter>().mesh = new Mesh();
        transform.GetComponent<MeshFilter>().mesh.CombineMeshes(combine);
        transform.gameObject.active = true;